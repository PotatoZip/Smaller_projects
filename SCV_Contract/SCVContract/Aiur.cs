using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using static System.Console;

namespace SCVContract {
    internal class Aiur {
        private MapProperties mapFunc;
        private Movement movement;
        PlanetInfo planetInfo = new PlanetInfo();
        public bool Play() {
            planetInfo.InfoAiur();

            string[,] mapa =
            {
               
                {"▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓", "▓","▓", "▓", "▓", "▓", "▓", "▓","▓", "▓"},
                {"▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓", "▓","▓", "▓", "▓", "▓", "▓", "▓","▓", "▓"},
                {"▓", "▓", " ","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓", "▓","▓", "▓", "▓", "▓", "▓", "▓","▓", "▓"},
                {"▓", "▓", " ","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", " ", " "," ", " ", " "," ", " ", " ","▓", "▓", "▓"," ", " ", " "," ", " ", " "," ", " ", " ", " "," ", " ", " ", " ", "▓", "▓","▓", "▓"},
                {"▓", "▓", " ","▓", "▓", "▓","▓", "▓", "▓","▓", " ", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", " ","▓", "▓", "▓"," ", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓", "▓","▓", "▓", "▓", " ", "▓", "▓","▓", "▓"},
                {"▓", "▓", " ","▓", "▓", " "," ", " ", " "," ", " ", "▓","▓", "▓", "▓","▓", " ", "▓","▓", "▓", "▓","▓", "▓", " ","▓", "▓", "▓"," ", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓", "▓","▓", "▓", "▓", " ", "▓", "▓","▓", "▓"},
                {"▓", "▓", " ","▓", "▓", " ","▓", "▓", "▓","▓", " ", "▓","▓", "▓", "▓","▓", " ", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓"," ", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓", "▓","▓", "▓", "▓", " ", "▓", "▓","▓", "▓"},
                {"▓", "▓", " ","▓", "▓", " ","▓", "▓", "▓","▓", " ", " "," ", "▓", " "," ", " ", " "," ", "▓", " "," ", " ", " "," ", "▓", "▓","▓", "▓", " "," ", " ", " "," ", "▓", "▓", "▓","▓", "▓", "▓", " ", "▓", "▓","▓", "▓"},
                {"▓", "▓", " "," ", " ", " "," ", " ", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", " ", "▓","▓", "▓", "▓","▓", "▓", "▓"," ", " ", " ","*", "▓", " ","▓", "▓", "▓"," ", "▓", "▓", "▓","▓", "▓", "▓", " ", "▓", "▓","▓", "▓"},
                {"▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", " ", "▓","▓", "▓", "▓","▓", "▓", "▓"," ", "▓", "▓","▓", "▓", " ","▓", "▓", "▓"," ", "▓", "▓", "▓","▓", "▓", "▓", " ", "▓", "▓","▓", "▓"},
                {"▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓"," ", "▓", "▓", "▓","▓", "▓", "▓", " ", "▓", "▓","▓", "▓"},
                {"▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", " ", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓"," ", "▓", "▓","▓", "▓", "▓"," ", "▓", "▓", "▓","▓", "▓", "▓", " ", "▓", "▓","▓", "▓"},
                {"▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", " ", " "," ", " ", " "," ", " ", "▓","▓", "▓", "▓","▓", "▓", "▓"," ", "▓", "▓","▓", "▓", "▓"," ", "▓", "▓", "▓","▓", "▓", "▓", " ", " ", "▓","▓", "▓"},
                {"▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", " ", "▓"," ", " ", " ","▓", " ", "▓","▓", "▓", "▓","▓", "▓", "▓"," ", "▓", "▓","▓", "▓", "▓"," ", "▓", "▓", "▓","▓", "▓", "▓", "▓", " ", "▓","▓", "▓"},
                {"▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", " ", " "," ", " ", " "," ", " ", " "," ", " ", " "," ", " ", " "," ", " ", " "," ", "▓", "▓","▓", "▓", "▓"," ", " ", " ", " ","▓", "▓", "▓", "▓", " ", "▓","▓", "▓"},
                {"▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", " ", "▓","▓", " ", "▓"," ", " ", " ","▓", " ", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓", "▓","▓", "▓", "▓", "▓", " ", "▓","▓", "▓"},
                {"▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", " ", "▓","▓", " ", " "," ", " ", " "," ", " ", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓", " ","▓", "▓", "▓", "▓", " ", "▓","▓", "▓"},
                {"▓", "▓", "▓","▓", " ", " "," ", " ", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", " ", " ","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓", " ","▓", "▓", "▓", "▓", " ", "▓","▓", "▓"},
                {"▓", "▓", "▓","▓", " ", "▓","▓", " ", "▓","▓", " ", "▓","▓", "▓", "▓","▓", " ", " ","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓"," ", " ", " ","▓", " ", " ", " "," ", " ", "▓", "▓", " ", "▓","▓", "▓"},
                {"▓", "▓", "▓","▓", " ", "▓","▓", " ", "▓","▓", " ", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓"," ", "▓", "▓","▓", "▓", "▓", " ","▓", "▓", "▓", "▓", " ", "▓","▓", "▓"},
                {"▓", "▓", "▓","▓", " ", " "," ", " ", " "," ", " ", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓"," ", "▓", "▓","▓", "▓", "▓", " ","▓", "▓", "▓", "▓", " ", "▓","▓", "▓"},
                {"▓", "▓", "▓","▓", "▓", "▓","▓", " ", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓"," ", "▓", "▓","▓", "▓", "▓", "▓","▓", "▓", "▓", "▓", " ", "▓","▓", "▓"},
                {"▓", "▓", "▓","▓", "▓", "▓","▓", " ", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓"," ", " ", "▓","▓", "▓", "▓", " "," ", "▓", "▓", "▓", " ", "▓","▓", "▓"},
                {"▓", "▓", "▓","▓", "▓", "▓","▓", " ", " "," ", " ", " "," ", " ", " "," ", " ", " "," ", " ", " "," ", " ", " "," ", " ", " "," ", " ", " "," ", " ", "▓","▓", "▓", "▓", " "," ", " ", " ", " ", " ", "▓","▓", "▓"},
                {"▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓", " ","▓", "▓", "▓", "▓", "▓", "▓","▓", "▓"},
                {"▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓", "▓","▓", "▓", "▓", "▓", "▓", "▓","▓", "▓"},
                {"▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓", "▓","▓", "▓", "▓", "▓", "▓", "▓","▓", "▓"},
                {"▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓","▓", "▓", "▓", "▓","▓", "▓", "▓", "▓", "▓", "▓","▓", "▓"},
           
               
                

            };

            mapFunc = new MapProperties(mapa);
            movement = new Movement(2, 2);

            return Loop();
        }
        private bool Loop() {
            var watch = new System.Diagnostics.Stopwatch();
            watch.Start();
            while (true) {
                if (watch.ElapsedMilliseconds > 1200000000) {
                    return false;
                }
                Clear();
                mapFunc.Draw();
                movement.Draw();

                ConsoleKeyInfo keyInfo = ReadKey(true);
                ConsoleKey key = keyInfo.Key;
                switch (key) {
                    case ConsoleKey.UpArrow:
                        if (mapFunc.CanGo(movement.X, movement.Y - 2)) {
                            movement.Y -= 2;
                        }
                        else {
                            if (mapFunc.CanGo(movement.X, movement.Y - 1) && (mapFunc.CanGo(movement.X, movement.Y - 2) == false)) {
                                movement.Y -= 1;
                            }
                            break;
                        }
                        break;
                    case ConsoleKey.W:
                        if (mapFunc.CanGo(movement.X, movement.Y - 2)) {
                            movement.Y -= 2;
                        }
                        else {
                            if (mapFunc.CanGo(movement.X, movement.Y - 1) && (mapFunc.CanGo(movement.X, movement.Y - 2) == false)) {
                                movement.Y -= 1;
                            }
                            break;
                        }
                        break;
                    case ConsoleKey.DownArrow:
                        if (mapFunc.CanGo(movement.X, movement.Y + 2)) {
                            movement.Y += 2;
                        }
                        else {
                            if (mapFunc.CanGo(movement.X, movement.Y + 1) && (mapFunc.CanGo(movement.X, movement.Y + 2) == false)) {
                                movement.Y += 1;
                            }
                            break;
                        }
                        break;
                    case ConsoleKey.S:
                        if (mapFunc.CanGo(movement.X, movement.Y + 2)) {
                            movement.Y += 2;
                        }
                        else {
                            if (mapFunc.CanGo(movement.X, movement.Y + 1) && (mapFunc.CanGo(movement.X, movement.Y + 2) == false)) {
                                movement.Y += 1;
                            }
                            break;
                        }
                        break;
                    case ConsoleKey.LeftArrow:
                        if (mapFunc.CanGo(movement.X - 2, movement.Y)) {
                            movement.X -= 2;
                        }
                        else {
                            if (mapFunc.CanGo(movement.X - 1, movement.Y) && (mapFunc.CanGo(movement.X - 2, movement.Y) == false)) {
                                movement.X -= 1;
                            }
                            break;
                        }
                        break;
                    case ConsoleKey.A:
                        if (mapFunc.CanGo(movement.X - 2, movement.Y)) {
                            movement.X -= 2;
                        }
                        else {
                            if (mapFunc.CanGo(movement.X - 1, movement.Y) && (mapFunc.CanGo(movement.X - 2, movement.Y) == false)) {
                                movement.X -= 1;
                            }
                            break;
                        }
                        break;
                    case ConsoleKey.RightArrow:
                        if (mapFunc.CanGo(movement.X + 2, movement.Y)) {
                            movement.X += 2;
                        }
                        else {
                            if (mapFunc.CanGo(movement.X + 1, movement.Y) && (mapFunc.CanGo(movement.X + 2, movement.Y) == false)) {
                                movement.X += 1;
                            }
                            break;
                        }
                        break;
                    case ConsoleKey.D:
                        if (mapFunc.CanGo(movement.X + 2, movement.Y)) {
                            movement.X += 2;
                        }
                        else {
                            if (mapFunc.CanGo(movement.X + 1, movement.Y) && (mapFunc.CanGo(movement.X + 2, movement.Y) == false)) {
                                movement.X += 1;
                            }
                            break;
                        }
                        break;
                    default:
                        break;
                };

                string coordsSCV = mapFunc.Coords(movement.X, movement.Y);
                if (coordsSCV == "*") {
                    break;
                }
                Thread.Sleep(30);
            }
            return true;
        }
    }
}
